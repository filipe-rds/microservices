// Inicializando o docker
docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=minhasenha -v "$(pwd)/db.sql:/docker-entrypoint-initdb.d/init.sql" mysql         

// Executar o banco de dados via container
docker exec -it [container-id] mysql -uroot -p     
senha=minhasenha

// Inicializar o serviço payment
DB_DRIVER=mysql DATA_SOURCE_URL=root:minhasenha@tcp(127.0.0.1:3306)/payment APPLICATION_PORT=3001 ENV=development go run cmd/main.go

// Inicializar o serviço order
DATA_SOURCE_URL=root:minhasenha@tcp(127.0.0.1:3306)/order APPLICATION_PORT=3000 ENV=development PAYMENT_SERVICE_URL=localhost:3001 SHIPPING_SERVICE_URL=localhost:3002 go run cmd/main.go

// Inicializar o serviço shipping
DATA_SOURCE_URL=root:minhasenha@tcp(127.0.0.1:3306)/shipping APPLICATION_PORT=3002 ENV=development go run cmd/main.go

// =================================
// TESTES DE INTEGRAÇÃO COMPLETA (Order → Payment → Shipping)
// =================================

// Teste de comunicação - pedido válido simples
grpcurl -d '{"customer_id": 123 , "order_items":[{"product_code": "PROD001", "quantity": 4, "unit_price": 12}]}' -plaintext localhost:3000 Order/Create

// Teste do erro com totalprirce > 1000
grpcurl -d '{"customer_id": 123 , "order_items":[{"product_code": "PROD001", "quantity": 10, "unit_price": 120}]}' -plaintext localhost:3000 Order/Create

// Teste do erro com quantity > 50
grpcurl -d '{"customer_id": 123 , "order_items":[{"product_code": "PROD001", "quantity": 51, "unit_price": 1}]}' -plaintext localhost:3000 Order/Create

// Teste com múltiplos produtos para validar cálculo de entrega
grpcurl -d '{"customer_id": 456, "order_items":[{"product_code": "PROD001", "quantity": 3, "unit_price": 10}, {"product_code": "PROD002", "quantity": 7, "unit_price": 25}]}' -plaintext localhost:3000 Order/Create

// =================================
// TESTES ESPECÍFICOS DO MICROSERVICE SHIPPING
// =================================

// Teste 1: Shipping com 1 item (quantidade baixa) - Espera 1 dia de entrega (1 + 0/5)
grpcurl -d '{"order_id": 100, "items":[{"product_code": "PROD001", "quantity": 3}]}' -plaintext localhost:3002 Shipping/Create

// Teste 2: Shipping com 5 itens exatos - Espera 2 dias de entrega (1 + 5/5)
grpcurl -d '{"order_id": 101, "items":[{"product_code": "PROD002", "quantity": 5}]}' -plaintext localhost:3002 Shipping/Create

// Teste 3: Shipping com 10 itens - Espera 3 dias de entrega (1 + 10/5)
grpcurl -d '{"order_id": 102, "items":[{"product_code": "PROD003", "quantity": 10}]}' -plaintext localhost:3002 Shipping/Create

// Teste 4: Shipping com múltiplos produtos (total 12 itens) - Espera 3 dias (1 + 12/5)
grpcurl -d '{"order_id": 103, "items":[{"product_code": "PROD001", "quantity": 7}, {"product_code": "PROD002", "quantity": 5}]}' -plaintext localhost:3002 Shipping/Create

// Teste 5: Shipping com 1 item só - Espera 1 dia (mínimo)
grpcurl -d '{"order_id": 104, "items":[{"product_code": "PROD004", "quantity": 1}]}' -plaintext localhost:3002 Shipping/Create

// Teste 6: Shipping com 23 itens - Espera 5 dias de entrega (1 + 23/5 = 1 + 4)
grpcurl -d '{"order_id": 105, "items":[{"product_code": "PROD005", "quantity": 23}]}' -plaintext localhost:3002 Shipping/Create

// Teste 7: Shipping com múltiplos produtos complexo (total 31 itens) - Espera 7 dias (1 + 31/5)
grpcurl -d '{"order_id": 106, "items":[{"product_code": "PROD001", "quantity": 8}, {"product_code": "PROD002", "quantity": 12}, {"product_code": "PROD003", "quantity": 11}]}' -plaintext localhost:3002 Shipping/Create

// =================================
// TESTES DE VALIDAÇÃO DOCKER COMPOSE
// =================================

// Build e start de todos os serviços
docker compose build && docker compose up -d

// Verificar status dos containers
docker compose ps

// Verificar logs dos serviços
docker compose logs --tail=5

// Teste de conectividade após docker compose
grpcurl -d '{"customer_id": 999, "order_items":[{"product_code": "PROD001", "quantity": 2, "unit_price": 10}]}' -plaintext localhost:3000 Order/Create

// =================================
// DEPLOY KUBERNETES (BÔNUS +1 PONTO)
// =================================

// 1. Build das imagens para Kubernetes
docker compose build

// 2. Deploy completo no Kubernetes
kubectl apply -k k8s/

// 3. Verificar status do deploy
kubectl get pods -n microservices
kubectl get services -n microservices

// 4. Forward de porta para testes (em outro terminal)
kubectl port-forward service/order 3000:3000 -n microservices

// 5. Teste no Kubernetes
grpcurl -d '{"customer_id": 888, "order_items":[{"product_code": "PROD001", "quantity": 5, "unit_price": 10}]}' -plaintext localhost:3000 Order/Create

// 6. Verificar logs no Kubernetes
kubectl logs -f deployment/order -n microservices
kubectl logs -f deployment/payment -n microservices
kubectl logs -f deployment/shipping -n microservices

// 7. Limpeza do Kubernetes
kubectl delete -k k8s/

// =================================
// DOCUMENTAÇÃO DOS TESTES
// =================================

/*
LÓGICA DE CÁLCULO DE ENTREGA DO SHIPPING:
- Prazo mínimo: 1 dia
- Regra: 1 dia base + 1 dia adicional a cada 5 unidades
- Fórmula: delivery_days = 1 + (total_quantity / 5)

EXEMPLOS DE CÁLCULO:
- 1-4 itens: 1 dia (1 + 0)
- 5-9 itens: 2 dias (1 + 1) 
- 10-14 itens: 3 dias (1 + 2)
- 15-19 itens: 4 dias (1 + 3)
- 20-24 itens: 5 dias (1 + 4)

REGRAS DE NEGÓCIO PAYMENT:
- Pagamentos > R$ 1000: REJEITADO
- Quantidade > 50 unidades: REJEITADO

PRODUTOS DISPONÍVEIS NO BANCO:
- PROD001: Produto 1 - R$ 10.50 (100 unidades)
- PROD002: Produto 2 - R$ 25.00 (50 unidades)
- PROD003: Produto 3 - R$ 15.75 (75 unidades)
- PROD004: Produto 4 - R$ 30.00 (25 unidades)
- PROD005: Produto 5 - R$ 12.99 (200 unidades)

REPOSITÓRIO MICROSERVICES-PROTO:
- URL: https://github.com/filipe-rds/microservices-proto
- Script: generate.sh (automaticamente clonado nos containers)
- Gera arquivos .pb.go durante o build do Docker
*/